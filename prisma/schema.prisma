generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  CLEANER
  ADMIN
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELED
}

enum PlanRecurrence {
  SEMIANNUAL
  QUARTERLY
  MONTHLY
  ANNUAL
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  PIX
  BANK_TRANSFER
}

enum NotificationType {
  REMINDER
  CONFIRMATION
  CANCELLATION
}

enum WeekDay {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model User {
  id               String   @id @default(uuid())
  firstName        String
  lastName         String
  email            String   @unique
  password         String
  identityDocument String   @unique
  phone            String   @unique
  role             UserRole @default(CLIENT)
  isActive         Boolean  @default(true)
  language         String   @default("en-US")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  addresses            Address[]
  appointmentsAsClient Appointment[]   @relation("ClientAppointments")
  userPlans            UserPlan[]
  Notification         Notification[]
  cleanerProfile       CleanerProfile?
  Review               Review[]

  @@index([email])
}

model Address {
  id           String  @id @default(uuid())
  isPrimary    Boolean @default(false)
  street       String
  number       String
  neighborhood String?
  city         String
  state        String
  country      String
  zipCode      String
  complement   String?
  reference    String?
  latitude     Float?
  longitude    Float?
  userId       String

  user        User          @relation(fields: [userId], references: [id])
  Appointment Appointment[]

  @@index([userId])
}

model Appointment {
  id             String            @id @default(uuid())
  dateTime       DateTime
  duration       Int               @default(60)
  status         AppointmentStatus
  notes          String?           @db.Text
  cleaningTypeId String
  planId         String?
  clientId       String
  cleanerId      String
  addressId      String

  cleaningType CleaningType   @relation(fields: [cleaningTypeId], references: [id])
  plan         Plan?          @relation(fields: [planId], references: [id])
  client       User           @relation("ClientAppointments", fields: [clientId], references: [id])
  cleaner      CleanerProfile @relation(fields: [cleanerId], references: [id])
  address      Address        @relation(fields: [addressId], references: [id])

  Payment Payment[]
  Review  Review[]

  @@index([dateTime])
  @@index([clientId, status])
  @@index([cleanerId, status])
}

model CleanerProfile {
  id           String  @id @default(uuid())
  bio          String?
  rating       Float   @default(0)
  reviewsCount Int     @default(0)
  isActive     Boolean @default(true)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  cleaningSpecialty CleaningType[]        @relation("Specialty")
  appointments      Appointment[]
  availability      CleanerAvailability[]
  Review            Review[]

  @@index([userId])
}

model CleaningType {
  id             String           @id @default(uuid())
  name           String
  description    String?
  price          Decimal          @db.Decimal(10, 2)
  duration       Int?
  appointments   Appointment[]
  CleanerProfile CleanerProfile[] @relation("Specialty")
}

model Plan {
  id               String         @id @default(uuid())
  name             String
  price            Decimal        @db.Decimal(10, 2)
  recurrence       PlanRecurrence
  daysToExpire     Int
  cleaningsPerWeek Int
  userPlans        UserPlan[]
  appointments     Appointment[]
}

model UserPlan {
  id            String   @id @default(uuid())
  userId        String
  planId        String
  startDate     DateTime
  endDate       DateTime
  active        Boolean  @default(true)
  usedCleanings Int      @default(0)
  paymentId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  plan Plan @relation(fields: [planId], references: [id])

  @@index([userId])
}

model Payment {
  id            String        @id @default(uuid())
  appointmentId String
  amount        Decimal       @db.Decimal(10, 2)
  method        PaymentMethod
  transactionId String?
  status        PaymentStatus
  currency      String        @default("BRL")
  createdAt     DateTime      @default(now())

  appointment Appointment @relation(fields: [appointmentId], references: [id])
}

model Notification {
  id        String           @id @default(uuid())
  title     String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  userId    String
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model CleanerAvailability {
  id        String   @id @default(uuid())
  cleanerId String
  weekDay   WeekDay
  startTime DateTime
  endTime   DateTime

  cleaner CleanerProfile @relation(fields: [cleanerId], references: [id])

  @@index([cleanerId, weekDay])
}

model Review {
  id            String   @id @default(uuid())
  rating        Float
  comment       String?
  cleanerId     String
  clientId      String
  appointmentId String? // Campo opcional adicionado
  createdAt     DateTime @default(now())

  cleaner     CleanerProfile @relation(fields: [cleanerId], references: [id])
  client      User           @relation(fields: [clientId], references: [id])
  appointment Appointment?   @relation(fields: [appointmentId], references: [id]) // Relação opcional

  @@index([cleanerId])
  @@index([appointmentId]) // Índice adicionado para consultas por appointmentId
}
